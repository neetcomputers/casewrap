{"version":3,"sources":["features/design/components/PanelPicker.js","features/design/Design.js","App.js","features/counter/counterSlice.js","features/design/designSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["PanelPicker","props","React","useState","collapseState","setCollapseState","Box","p","Typography","variant","title","Switch","name","onClick","Collapse","in","type","Checkbox","Design","Container","fixed","Grid","container","justify","alignItems","item","xs","Select","fullWidth","map","index","MenuItem","value","string","minHeight","m","App","darkTheme","createMuiTheme","palette","ThemeProvider","theme","className","bgcolor","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","designSlice","configureStore","reducer","counter","counterReducer","design","designReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03342f2f.chunk.js","sourcesContent":["import React from 'react'\n\nimport Box from '@material-ui/core/Box'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Collapse from '@material-ui/core/Collapse'\nimport Switch from '@material-ui/core/Switch'\nimport Typography from '@material-ui/core/Typography'\n\nconst PanelPicker = (props) => {\n    const [collapseState, setCollapseState] = React.useState(false)\n\n    return <Box p={1}>\n      <Typography variant=\"h4\">{props.title}:<Switch name={props.title} onClick={() => setCollapseState(!collapseState)}/></Typography>\n      <Collapse in={collapseState} >\n        <Typography variant=\"body1\">Upload Custom Image:</Typography>\n        <input type=\"file\" />\n        <Typography variant=\"body1\">Custom Url To Image:</Typography>\n        <input type=\"text\" />\n        <Typography variant=\"body1\">Upscale Image:<Checkbox /></Typography>\n      </Collapse>\n    </Box>\n}\n\nexport default PanelPicker","import React from 'react'\n\nimport PanelPicker from './components/PanelPicker'\n\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Collapse from '@material-ui/core/Collapse'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport Switch from '@material-ui/core/Switch'\nimport Typography from '@material-ui/core/Typography'\n\n\nconst Design = () => {\n  const panel_array = [\n    \"Front\",\n    \"Top\",\n    \"Left Side\",\n    \"Right Side\"\n  ]\n\n  const case_array = [\n    \"NZXT H710\",\n    \"NZXT H510\",\n    \"NZXT H210\",\n    \"NZXT H1\"\n  ]\n\n  return <Container fixed>\n    <Grid container justify=\"space-between\" alignItems=\"flex-end\" name=\"topbar\">\n      <Grid item xs>\n        <Box p={2}>\n          <Typography variant=\"h3\">Custom Wrap <br/>Configurator</Typography>\n        </Box>\n      </Grid>\n      <Grid item>\n        <Typography variant=\"h5\">Toggle 3D View:  <Switch name=\"3dview\" /></Typography>\n      </Grid>\n    </Grid>\n    <Grid container>\n      <Grid xs={3} item name=\"sidebar\">\n        <Box name=\"casepicker\" p={1}>\n          <Typography variant=\"h4\">Case:</Typography>\n          <Select name=\"case\" fullWidth  >\n            {\n              case_array.map((item, index)  => {\n                return <MenuItem key={\"ca\"+index} value={item}>{item}</MenuItem>\n              })\n            }\n          </Select>\n        </Box>\n        <Box>\n          {\n            panel_array.map((string,index) => {\n              return <PanelPicker key={\"panelp\"+index} title={string}/>\n            })\n          }\n        </Box>\n      </Grid>\n      <Grid item xs name=\"body\">\n        <Box minHeight=\"50vh\" m={5}>\n          Main Image Goes Here\n        </Box>\n        <Typography variant=\"body2\">\n          Preview Blurry?<br/>\n          Hit the upscale button for each individual image to make them look sharper.\n        </Typography>\n      </Grid>\n    </Grid>\n  </Container>\n}\n\nexport default Design\n","import React from 'react';\nimport Design from './features/design/Design';\nimport './App.css';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport Box from '@material-ui/core/Box'\n\nfunction App() {\n  const darkTheme = createMuiTheme({\n    palette: {\n      type: 'dark',\n    },\n  });\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <Box className=\"App\" bgcolor=\"#24282B\">\n        <Design />\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = amount => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCount = state => state.counter.value;\n\nexport default counterSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const designSlice = createSlice({\n  name: 'design',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = designSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = amount => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.design.value)`\nexport const selectCount = state => state.design.value;\n\nexport default designSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport designReducer from '../features/design/designSlice';\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer,\n    design: designReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}