{"version":3,"sources":["features/design/components/PanelPicker.js","features/design/Design.js","App.js","features/counter/counterSlice.js","features/design/designSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["PanelPicker","props","React","useState","collapseState","setCollapseState","Box","p","Typography","variant","title","Switch","name","onClick","Collapse","in","type","Checkbox","Design","Container","fixed","Grid","container","justify","alignItems","item","xs","Select","fullWidth","map","index","MenuItem","value","string","minHeight","m","App","darkTheme","createMuiTheme","palette","ThemeProvider","theme","className","bgcolor","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","designSlice","configureStore","reducer","counter","counterReducer","design","designReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7be8c1e3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport Box from '@material-ui/core/Box'\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst PanelPicker = (props) => {\r\n    const [collapseState, setCollapseState] = React.useState(false)\r\n\r\n    return <Box p={1}>\r\n      <Typography variant=\"h4\">{props.title}:<Switch name={props.title} onClick={() => setCollapseState(!collapseState)}/></Typography>\r\n      <Collapse in={collapseState} >\r\n        <Typography variant=\"body1\">Upload Custom Image:</Typography>\r\n        <input type=\"file\" />\r\n        <Typography variant=\"body1\">Custom Url To Image:</Typography>\r\n        <input type=\"text\" />\r\n        <Typography variant=\"body1\">Upscale Image:<Checkbox /></Typography>\r\n      </Collapse>\r\n    </Box>\r\n}\r\n\r\nexport default PanelPicker","import React from 'react'\r\n\r\nimport PanelPicker from './components/PanelPicker'\r\n\r\nimport Container from '@material-ui/core/Container'\r\nimport Box from '@material-ui/core/Box'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n\r\nconst Design = () => {\r\n  const panel_array = [\r\n    \"Front\",\r\n    \"Top\",\r\n    \"Left Side\",\r\n    \"Right Side\"\r\n  ]\r\n\r\n  const case_array = [\r\n    \"Fractal Design R6\",\r\n    \"Case 2\",\r\n    \"Case 3\"\r\n  ]\r\n\r\n  return <Container fixed>\r\n    <Grid container justify=\"space-between\" alignItems=\"flex-end\" name=\"topbar\">\r\n      <Grid item xs>\r\n        <Box p={2}>\r\n          <Typography variant=\"h3\">Custom Wrap <br/>Configurator</Typography>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant=\"h5\">Toggle 3D View:  <Switch name=\"3dview\" /></Typography>\r\n      </Grid>\r\n    </Grid>\r\n    <Grid container>\r\n      <Grid xs={3} item name=\"sidebar\">\r\n        <Box name=\"casepicker\" p={1}>\r\n          <Typography variant=\"h4\">Case:</Typography>\r\n          <Select name=\"case\" fullWidth  >\r\n            {\r\n              case_array.map((item, index)  => {\r\n                return <MenuItem key={\"ca\"+index} value={item}>{item}</MenuItem>\r\n              })\r\n            }\r\n          </Select>\r\n        </Box>\r\n        <Box>\r\n          {\r\n            panel_array.map((string,index) => {\r\n              return <PanelPicker key={\"panelp\"+index} title={string}/>\r\n            })\r\n          }\r\n        </Box>\r\n      </Grid>\r\n      <Grid item xs name=\"body\">\r\n        <Box minHeight=\"50vh\" m={5}>\r\n          Main Image Goes Here\r\n        </Box>\r\n        <Typography variant=\"body2\">\r\n          Preview Blurry?<br/>\r\n          Hit the upscale button for each individual image to make them look sharper.\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  </Container>\r\n}\r\n\r\nexport default Design","import React from 'react';\r\nimport Design from './features/design/Design';\r\nimport './App.css';\r\n\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport Box from '@material-ui/core/Box'\r\n\r\nfunction App() {\r\n  const darkTheme = createMuiTheme({\r\n    palette: {\r\n      type: 'dark',\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <Box className=\"App\" bgcolor=\"#24282B\">\r\n        <Design />\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const designSlice = createSlice({\r\n  name: 'design',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = designSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.design.value)`\r\nexport const selectCount = state => state.design.value;\r\n\r\nexport default designSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport designReducer from '../features/design/designSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    design: designReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}